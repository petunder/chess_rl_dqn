Данный код представляет собой реализацию нейронной сети для игры в шахматы с использованием библиотеки PyTorch. Нейронная сеть предназначена для предсказания следующего хода на основе текущего состояния доски.

**Входные данные**

На вход нейронной сети подается тензор размером `(13, 8, 8)`, где:

* `13` - количество каналов, соответствующих различным фигурам и состояниям доски:
	+ Каналы 0-11: фигуры (пешки, ладьи, кони, слоны, ферзи, короли)
	+ Канал 12: текущий ход (белые или черные)
* `8` - размер доски по горизонтали и вертикали

**Нейронная сеть**

Нейронная сеть состоит из следующих блоков:

1. **ConvBlock**: блок, содержащий сверточный слой, слой нормализации и слой активации (ReLU).
2. **ResBlock**: блок, содержащий два ConvBlock с残ной связью.
3. **ChessNetwork**: основная нейронная сеть, состоящая из:
	* Входного сверточного слоя (ConvBlock)
	* Серии ResBlock (19 штук)
	* Двух выходных голов:
		+ Политика (policy): предсказывает следующий ход
		+ Оценка (value): оценивает текущее состояние доски

**Критерий потерь**

Критерий потерь используется для оценки качества предсказаний нейронной сети. В данном случае используется критерий потерь **CrossEntropyLoss** для политики и **MeanSquaredError** для оценки.

**Расчет потерь**

Потери рассчитываются следующим образом:

1. **Политика**:
	* Предсказанные ходы сравниваются с истинными ходами.
	* Рассчитывается перекрестная энтропия между предсказанными и истинными ходами.
2. **Оценка**:
	* Предсказанные оценки сравниваются с истинными оценками.
	* Рассчитывается среднеквадратичная ошибка между предсказанными и истинными оценками.

**Обучение**

Нейронная сеть обучается на датасете шахматных партий. Обучение происходит в несколько эпох, во время каждой эпохи:

1. **Тренировочный набор**: модель обучается на тренировочном наборе данных.
2. **Проверочный набор**: модель оценивается на проверочном наборе данных.

**Логирование**

Во время обучения логгируются различные метрики, такие как:

* Средние потери политики и оценки на тренировочном и проверочном наборах.
* Точность предсказаний на проверочном наборе.

**Сохранение модели**

После обучения модель сохраняется в файл `pretrained_chess_model_train.pth`.